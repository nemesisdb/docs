"use strict";(self.webpackChunknemesisdb=self.webpackChunknemesisdb||[]).push([[7219],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),m=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(n),c=a,k=u["".concat(o,".").concat(c)]||u[c]||d[c]||i;return n?r.createElement(k,l(l({ref:t},p),{},{components:n})):r.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var m=2;m<i;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6925:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2,displayed_sidebar:"homeSidebar"},l="TLDR - Time Series",s={unversionedId:"home/tldr-ts",id:"home/tldr-ts",title:"TLDR - Time Series",description:"NemesisDB is a JSON in-memory database:",source:"@site/docs/home/tldr-ts.md",sourceDirName:"home",slug:"/home/tldr-ts",permalink:"/home/tldr-ts",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,displayed_sidebar:"homeSidebar"},sidebar:"homeSidebar",previous:{title:"TLDR - Key Value",permalink:"/home/tldr-kv"},next:{title:"Install",permalink:"/category/install"}},o={},m=[{value:"Structure",id:"structure",level:2},{value:"Indexes",id:"indexes",level:2}],p={toc:m},u="wrapper";function d(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tldr---time-series"},"TLDR - Time Series"),(0,a.kt)("p",null,"NemesisDB is a JSON in-memory database:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time series data is stored in memory"),(0,a.kt)("li",{parentName:"ul"},"Writing time series data to disk is not supported yet")),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("p",null,"The time series implementation is intentionally simple:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A time series is created, identified by a unique name"),(0,a.kt)("li",{parentName:"ul"},"An event occured at a particular time"),(0,a.kt)("li",{parentName:"ul"},"Time is a signed 64-bit integer"),(0,a.kt)("li",{parentName:"ul"},"An event is a JSON object"),(0,a.kt)("li",{parentName:"ul"},"Top level event members can be indexed")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Individual events in a time series cannot be deleted, only the complete time series. ")),(0,a.kt)("p",null,"Internally, time and event data are stored in parallel vectors (resizeable arrays). This is straight forward to find an event from its time (and vice versa) and also benefits from cache/spatial locality because vectors are contiguous in memory."),(0,a.kt)("p",null,"The API works in a similar manner. To add events you supply an array of times (",(0,a.kt)("inlineCode",{parentName:"p"},"t"),") and an array of events (",(0,a.kt)("inlineCode",{parentName:"p"},"evt"),"). "),(0,a.kt)("p",null,"To record four temperature readings at times 10, 15, 20 and 25:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "TS_ADD_EVT":\n  {\n    "ts":"series1",\n    "t":[10,15,20,25],\n    "evt":\n    [\n      {"temp":5},\n      {"temp":4},\n      {"temp":2},\n      {"temp":6}\n    ]\n  }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ts")," is the time series name"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"t")," is the time array (which must be in ascending order)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"evt")," is the events array")),(0,a.kt)("p",null,"An event at ",(0,a.kt)("inlineCode",{parentName:"p"},"evt[i]")," occured at ",(0,a.kt)("inlineCode",{parentName:"p"},"t[i]"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"time series structure",src:n(8586).Z,width:"578",height:"203"})),(0,a.kt)("p",null,"At time 15 the temperature was 4 (",(0,a.kt)("inlineCode",{parentName:"p"},"15")," is at ",(0,a.kt)("inlineCode",{parentName:"p"},"t[1]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"evt[1]")," is ",(0,a.kt)("inlineCode",{parentName:"p"},'{"temp":4}'),")."),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"indexes"},"Indexes"),(0,a.kt)("p",null,"Top level event members can be indexed, allowing to use them in the ",(0,a.kt)("inlineCode",{parentName:"p"},"where")," clause of ",(0,a.kt)("inlineCode",{parentName:"p"},"TS_GET")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"TS_GET_MULTI"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "TS_GET":\n  {\n    "ts":"series1",\n    "rng":[15,25],\n    "where":\n    {\n      "temperature":\n      {\n        "<":6\n      }\n    }\n  }\n}\n')),(0,a.kt)("br",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rng"),' is "range" which accepts the min and max times (inclusive)'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"where")," contains the conditions")),(0,a.kt)("p",null,'The above command says, "Get events which occured between times 15 and 25 inclusive ',(0,a.kt)("em",{parentName:"p"},"and"),' where the temperature is less than 6". In the above data, this will return times and events for times 15 and 20.'),(0,a.kt)("p",null,"We could also get events for temperatures in a range:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "TS_GET":\n  {\n    "ts":"series1",\n    "rng":[],\n    "where":\n    {\n      "temperature":\n      {\n        "[]":[4,5]\n      }\n    }\n  }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rng")," : no time limits set, whole time series is checked"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"where")," : the range operator ",(0,a.kt)("inlineCode",{parentName:"li"},"[]")," is used to find temperatures between 3 and 5 inclusive")),(0,a.kt)("p",null,"This returns events at times 10 and 15."))}d.isMDXComponent=!0},8586:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/tldr-ts-parallel-363423039cebefac144db8645f0e95fd.svg"}}]);