"use strict";(self.webpackChunknemesisdb=self.webpackChunknemesisdb||[]).push([[1757],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=o(n),u=r,k=m["".concat(p,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},416:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:30,displayed_sidebar:"clientApisSidebar"},l="add",s={unversionedId:"client_apis/python/lst/add",id:"client_apis/python/lst/add",title:"add",description:"|Param|Description|",source:"@site/docs/client_apis/python/lst/add.md",sourceDirName:"client_apis/python/lst",slug:"/client_apis/python/lst/add",permalink:"/client_apis/python/lst/add",draft:!1,tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,displayed_sidebar:"clientApisSidebar"},sidebar:"clientApisSidebar",previous:{title:"create",permalink:"/client_apis/python/lst/create"},next:{title:"add_head",permalink:"/client_apis/python/lst/add_head"}},p={},o=[{value:"Raises",id:"raises",level:2},{value:"Examples",id:"examples",level:2}],d={toc:o},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"add"},"add"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"async def add(name: str, items: list[dict] | dict, pos = None) -> int:\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the list")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"items"),(0,r.kt)("td",{parentName:"tr",align:null},"- Single item: dictionary",(0,r.kt)("br",null),"- Multiple times: A list of dictionaries")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pos"),(0,r.kt)("td",{parentName:"tr",align:null},"The position to insert the items. If out of bounds, the items are appened to the tail")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"add_head"},(0,r.kt)("inlineCode",{parentName:"a"},"add_head()"))," or ",(0,r.kt)("a",{parentName:"p",href:"add_tail"},(0,r.kt)("inlineCode",{parentName:"a"},"add_tail()"))," can be used for convenience.")),(0,r.kt)("p",null,"The item(s) are inserted into the list at the given position."),(0,r.kt)("p",null,"With a list of four nodes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A-B-D-E\n")),(0,r.kt)("p",null,"Then call ",(0,r.kt)("inlineCode",{parentName:"p"},"add()")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"pos=2"),", it will insert at ",(0,r.kt)("inlineCode",{parentName:"p"},"D"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A-B-C-D-E\n    ^\n")),(0,r.kt)("p",null,"For multiple items, the insertion begins at ",(0,r.kt)("inlineCode",{parentName:"p"},"pos"),"."),(0,r.kt)("p",null,"With a list having nodes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A-E-F-G\n")),(0,r.kt)("p",null,"Then call ",(0,r.kt)("inlineCode",{parentName:"p"},"add()")," with 3 items and ",(0,r.kt)("inlineCode",{parentName:"p"},"pos=1"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A-B-C-D-E-F-G\n  ^---^\n")),(0,r.kt)("h2",{id:"raises"},"Raises"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ResponseError"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," does not exist")))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from ndb.client import NdbClient\nfrom ndb.lists import ObjLists\n\nclient = NdbClient()\nawait client.open('ws://127.0.0.1:1987/')\n\n# create API object\nlists = ObjLists(client)\n\nawait lists.create('my_list')\n# add an item\nawait lists.add('my_list', {'username':'Bob'})\n# add multiple items. pos isn't set, so add to tail by default\nawait lists.add('my_list', [{'username':'Brian'}, {'username':'Charles'}])\n# add multiple items to the head. can use add() with pos=0, or add_head()\nawait lists.add_head('my_list', [{'username':'Alice'}, {'username':'Anna'}])\n\n\nnames = await lists.get_rng('my_list', start=0)\nprint(f'Before Brenda: {names}')\n\n# insert Brenda at Brian\nawait lists.add('my_list', {'username':'Brenda'}, pos=3)\n\nnames = await lists.get_rng('my_list', start=0)\nprint(f'After: {names}')\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"Before Brenda: [{'username': 'Alice'}, {'username': 'Anna'}, {'username': 'Bob'}, {'username': 'Brian'}, {'username': 'Charles'}]\nAfter: [{'username': 'Alice'}, {'username': 'Anna'}, {'username': 'Bob'}, {'username': 'Brenda'}, {'username': 'Brian'}, {'username': 'Charles'}]\n")))}c.isMDXComponent=!0}}]);