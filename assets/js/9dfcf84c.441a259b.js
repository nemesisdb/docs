"use strict";(self.webpackChunknemesisdb=self.webpackChunknemesisdb||[]).push([[683],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),o=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=o(n),k=i,u=d["".concat(p,".").concat(k)]||d[k]||m[k]||a;return n?r.createElement(u,l(l({ref:t},c),{},{components:n})):r.createElement(u,l({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=k;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:i,l[1]=s;for(var o=2;o<a;o++)l[o]=n[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>o});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:170,displayed_sidebar:"clientApisSidebar"},l="splice",s={unversionedId:"client_apis/python/lst/splice",id:"client_apis/python/lst/splice",title:"splice",description:"|Param|Description|",source:"@site/docs/client_apis/python/lst/splice.md",sourceDirName:"client_apis/python/lst",slug:"/client_apis/python/lst/splice",permalink:"/client_apis/python/lst/splice",draft:!1,tags:[],version:"current",sidebarPosition:170,frontMatter:{sidebar_position:170,displayed_sidebar:"clientApisSidebar"},sidebar:"clientApisSidebar",previous:{title:"length",permalink:"/client_apis/python/lst/length"},next:{title:"Server",permalink:"/category/server"}},p={},o=[{value:"Raises",id:"raises",level:2},{value:"Examples",id:"examples",level:2}],c={toc:o},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"splice"},"splice"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"async def splice(self, destName: str, srcName: str, srcStart: int, srcEnd = None, destPos = None) -> None\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Param"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"destName"),(0,i.kt)("td",{parentName:"tr",align:null},"The list to receive the spliced nodes. This is created if it doesn't exist.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"srcName"),(0,i.kt)("td",{parentName:"tr",align:null},"The list to splice")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"srcStart"),(0,i.kt)("td",{parentName:"tr",align:null},"The position in ",(0,i.kt)("inlineCode",{parentName:"td"},"srcName")," to begin splicing")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"srcEnd"),(0,i.kt)("td",{parentName:"tr",align:null},"The exclusive position in ",(0,i.kt)("inlineCode",{parentName:"td"},"srcName")," to stop splicing. If ",(0,i.kt)("inlineCode",{parentName:"td"},"None"),", to end is used")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"destPos"),(0,i.kt)("td",{parentName:"tr",align:null},"The position in ",(0,i.kt)("inlineCode",{parentName:"td"},"destName")," where the spliced nodes will be inserted. If ",(0,i.kt)("inlineCode",{parentName:"td"},"None"),", nodes be appended to the tail")))),(0,i.kt)("p",null,"Move source nodes in range ",(0,i.kt)("inlineCode",{parentName:"p"},"[srcStart, srcEnd)")," and to the destination list, inserting at ",(0,i.kt)("inlineCode",{parentName:"p"},"destPos"),"."),(0,i.kt)("p",null,"If the destination list does not exist, it is created."),(0,i.kt)("p",null,"No nodes are copied, only pointers are amended."),(0,i.kt)("h2",{id:"raises"},"Raises"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ResponseError")," if query fails",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"srcName")," does not exist"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ValueError"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"destName")," is empty"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"srcName")," is empty"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TypeError"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"srcEnd")," not an int"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"destPos")," not an int")))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from ndb.client import NdbClient\nfrom ndb.lists import ObjLists\n\nclient = NdbClient()\nawait client.open('ws://127.0.0.1:1987/')\n\nlists = ObjLists(client)\n\nawait lists.create('src')\n\ndata = []\nfor i in range(0,10):\n  data.append({f'k{i}':i})\n\nawait lists.add('src', data)\n\nsrc_list = await lists.get_rng('src', start=0)\nprint(f'Source\\n{src_list}')\n\n# move k3, k4 to a new list\nprint('Splicing 1')\nawait lists.splice('dest', 'src', srcStart=3, srcEnd=5)\n\nsrc_list = await lists.get_rng('src', start=0)\ndest_list = await lists.get_rng('dest', start=0)\n\nprint(f'\\tSource: {src_list}')\nprint(f'\\tDest: {dest_list}')\n\n# move k5 to k9, appending to destination\nprint('Splicing 2')\nawait lists.splice('dest', 'src', srcStart=3)\n\nsrc_list = await lists.get_rng('src', start=0)\ndest_list = await lists.get_rng('dest', start=0)\n\nprint(f'\\tSource: {src_list}')\nprint(f'\\tDest: {dest_list}')\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Source\n[{'k0': 0}, {'k1': 1}, {'k2': 2}, {'k3': 3}, {'k4': 4}, {'k5': 5}, {'k6': 6}, {'k7': 7}, {'k8': 8}, {'k9': 9}]\nSplicing 1\n  Source: [{'k0': 0}, {'k1': 1}, {'k2': 2}, {'k5': 5}, {'k6': 6}, {'k7': 7}, {'k8': 8}, {'k9': 9}]\n  Dest: [{'k3': 3}, {'k4': 4}]\nSplicing 2\n  Source: [{'k0': 0}, {'k1': 1}, {'k2': 2}]\n  Dest: [{'k3': 3}, {'k4': 4}, {'k5': 5}, {'k6': 6}, {'k7': 7}, {'k8': 8}, {'k9': 9}]\n")))}m.isMDXComponent=!0}}]);