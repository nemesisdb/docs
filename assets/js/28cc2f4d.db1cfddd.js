"use strict";(self.webpackChunknemesisdb=self.webpackChunknemesisdb||[]).push([[2473],{3905:(e,t,n)=>{n.d(t,{Zo:()=>k,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},k=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,k=s(e,["components","mdxType","originalType","parentName"]),m=o(n),u=r,c=m["".concat(p,".").concat(u)]||m[u]||d[u]||l;return n?a.createElement(c,i(i({ref:t},k),{},{components:n})):a.createElement(c,i({ref:t},k))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5975:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:150},i="KV_FIND",s={unversionedId:"api/kv/kv-find",id:"api/kv/kv-find",title:"KV_FIND",description:"Searches the values and returns keys, data or paths.",source:"@site/docs/api/kv/kv-find.md",sourceDirName:"api/kv",slug:"/api/kv/kv-find",permalink:"/api/kv/kv-find",draft:!1,tags:[],version:"current",sidebarPosition:150,frontMatter:{sidebar_position:150},sidebar:"apiSidebar",previous:{title:"KV_LOAD",permalink:"/api/kv/kv-load"}},p={},o=[{value:"<code>&quot;keys&quot;</code>",id:"keys",level:2},{value:"<code>&quot;paths&quot;</code>",id:"paths",level:2},{value:"<code>&quot;kv&quot;</code>",id:"kv",level:2},{value:"Response",id:"response",level:2},{value:"keys",id:"keys-1",level:3},{value:"paths",id:"paths-1",level:3},{value:"kv",id:"kv-1",level:3},{value:"Examples",id:"examples",level:2},{value:"Keys",id:"keys-2",level:3},{value:"Paths",id:"paths-2",level:3},{value:"KV",id:"kv-2",level:3}],k={toc:o},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"kv_find"},"KV_FIND"),(0,r.kt)("p",null,"Searches the values and returns keys, data or paths."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Param"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"rsp"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Must be one of: ",(0,r.kt)("inlineCode",{parentName:"td"},"keys"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"kv"),", or ",(0,r.kt)("inlineCode",{parentName:"td"},"paths")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"path"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A JSON Path applied to each key's value"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"keys"),(0,r.kt)("td",{parentName:"tr",align:"left"},"array"),(0,r.kt)("td",{parentName:"tr",align:"left"},"An array of keys. If present, only these keys are searched"),(0,r.kt)("td",{parentName:"tr",align:"center"},"N")))),(0,r.kt)("br",null),(0,r.kt)("p",null,"The response depends on ",(0,r.kt)("inlineCode",{parentName:"p"},"rsp")," (",(0,r.kt)("a",{parentName:"p",href:"#examples"},"examples")," below):"),(0,r.kt)("h2",{id:"keys"},(0,r.kt)("inlineCode",{parentName:"h2"},'"keys"')),(0,r.kt)("p",null,"Only keys matching the path are returned."),(0,r.kt)("h2",{id:"paths"},(0,r.kt)("inlineCode",{parentName:"h2"},'"paths"')),(0,r.kt)("p",null,"The paths to the element(s) matching the path returned. The key in which the values are found are not returned."),(0,r.kt)("h2",{id:"kv"},(0,r.kt)("inlineCode",{parentName:"h2"},'"kv"')),(0,r.kt)("p",null,"The keys and values are returned for matching paths."),(0,r.kt)("h2",{id:"response"},"Response"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"KV_FIND_RSP")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tkn")," is always returned so this is omitted from the tables below."),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"keys-1"},"keys"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Param"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"keys"),(0,r.kt)("td",{parentName:"tr",align:"left"},"array"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Array of keys")))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"paths-1"},"paths"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Param"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"paths"),(0,r.kt)("td",{parentName:"tr",align:"left"},"array"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Array of paths")))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"kv-1"},"kv"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Param"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"keys"),(0,r.kt)("td",{parentName:"tr",align:"left"},"object"),(0,r.kt)("td",{parentName:"tr",align:"left"},"For each key that matches the criteria there's an entry:  ",(0,r.kt)("inlineCode",{parentName:"td"},'"<keyname>":<value>'))))),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"These examples are based on storing this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_SET":\n  {\n    "keys":\n    {\n      "Devices":\n      [\n        {\n          "make":"Apple",\n          "model":"iPhone 14",\n          "sensors":\n          [\n            {"type":"Temperature", "status":"Healthy", "id":"temp1"},\n            {"type":"Accelerometer", "status":"Healthy", "id":"accel1"}\n          ],\n          "readings":\n          {\n            "accel1":\n            [\n              {"value":2.5, "time":12345600},\n              {"value":1.565, "time":12345601}\n            ],\n            "temp1":\n            [\n              {"value":12.5, "time":12345603},\n              {"value":12.8, "time":12345606}\n            ]\n          }\n        },\n        {\n          "make":"Samsung",\n          "model":"S23",\n          "sensors":\n          [\n            {"type":"Temperature", "status":"Healthy", "id":"temp1"},\n            {"type":"Accelerometer", "status":"Healthy", "id":"accel1"},\n            {"type":"ThingyMaBob", "status":"Disabled", "id":"thingy1"}\n          ],\n          "readings":\n          {\n            "temp1":\n            [\n              {"value":24.0, "time":12345603},\n              {"value":25.5, "time":12345604}\n            ]\n          }\n        } \n      ]\n    }\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'A "Device" key which is an array of objects'),(0,r.kt)("li",{parentName:"ul"},"Each object represents some device info (sensors and readings)")),(0,r.kt)("h3",{id:"keys-2"},"Keys"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Find if we have a Samsung device"',title:'"Find',if:!0,we:!0,have:!0,a:!0,Samsung:!0,'device"':!0},'{\n  "KV_FIND":\n  {\n    "rsp":"keys",\n    "path":"$[?(@.make == \'Samsung\')]"\n  }\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_FIND_RSP":\n  {\n    "keys": ["Devices"]\n  }\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Find if we have an Apple iPhone 14"',title:'"Find',if:!0,we:!0,have:!0,an:!0,Apple:!0,iPhone:!0,'14"':!0},'{\n  "KV_FIND":\n  {\n    "rsp":"keys",\n    "path":"$[?(@.make == \'Apple\' && @.model == \'iPhone 14\')]"\n  }\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_FIND_RSP":\n  {\n    "keys": ["Devices"]\n  }\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Find if we have an Apple iPhone 11"',title:'"Find',if:!0,we:!0,have:!0,an:!0,Apple:!0,iPhone:!0,'11"':!0},'{\n  "KV_FIND":\n  {\n    "rsp":"keys",\n    "path":"$[?(@.make == \'Apple\' && @.model == \'iPhone 11\')]"\n  }\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Keys is empty, no iPhone 11"',title:'"Keys',is:!0,"empty,":!0,no:!0,iPhone:!0,'11"':!0},'{\n  "KV_FIND_RSP":\n  {\n    "keys": []\n  }\n}\n')),(0,r.kt)("h3",{id:"paths-2"},"Paths"),(0,r.kt)("p",null,"Only the path is returned"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Find devices that have at least three sensors"',title:'"Find',devices:!0,that:!0,have:!0,at:!0,least:!0,three:!0,'sensors"':!0},'{\n  "KV_FIND":\n  {\n    "rsp":"paths",\n    "path":"$[?(@.sensors.length >= 3)]"\n  }\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="iPhone 14"',title:'"iPhone','14"':!0},'{\n  "KV_FIND_RSP":\n  {\n    "paths": ["$[1]"]\n  }\n}\n')),(0,r.kt)("h3",{id:"kv-2"},"KV"),(0,r.kt)("p",null,"For this we'll use this data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_SET":\n  {\n    "keys":\n    {\n      "loginsValid":\n      [\n        {"timestamp":1234, "location":"London"},\n        {"timestamp":1235, "location":"London"},\n        {"timestamp":1236, "location":"Paris"},\n        {"timestamp":1238, "location":"London"}\n      ],\n      "loginsFailed":\n      [\n        {"timestamp":1235, "location":"New York"},\n        {"timestamp":1235, "location":"London"},\n        {"timestamp":1237, "location":"New York"}\n      ]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Get the valid logins if any are between timestamps 1234 and 1238:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_FIND":\n  {\n    "rsp":"kv",\n    "keys":["loginsValid"],\n    "path":"$[?(@.timestamp > 1234 && @.timestamp < 1238)]"\n  }\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_FIND_RSP":\n  {\n    "kv": {\n      "loginsValid": [\n        {\n          "timestamp": 1234,\n          "location": "London"\n        },\n        {\n          "timestamp": 1235,\n          "location": "London"\n        },\n        {\n          "timestamp": 1236,\n          "location": "Paris"\n        },\n        {\n          "timestamp": 1238,\n          "location": "London"\n        }\n      ]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Get the failed logins if any are from London:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Restrict to loginsFailed key"',title:'"Restrict',to:!0,loginsFailed:!0,'key"':!0},'{\n  "KV_FIND":\n  {\n    "rsp":"kv",\n    "keys":["loginsFailed"],\n    "path":"$[?(@.location == \'London\')]"\n  }\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_FIND_RSP":\n  {\n    "kv": {\n      "loginsFailed": [\n        {\n          "timestamp": 1235,\n          "location": "New York"\n        },\n        {\n          "timestamp": 1235,\n          "location": "London"\n        },\n        {\n          "timestamp": 1237,\n          "location": "New York"\n        }\n      ]\n    }\n  }\n}\n')))}d.isMDXComponent=!0}}]);