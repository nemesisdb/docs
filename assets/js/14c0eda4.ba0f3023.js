"use strict";(self.webpackChunknemesisdb=self.webpackChunknemesisdb||[]).push([[3758],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,k=c["".concat(o,".").concat(m)]||c[m]||u[m]||s;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,r=new Array(s);r[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<s;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3635:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const s={sidebar_position:1,displayed_sidebar:"clientApisSidebar",sidebar_label:"sh_create_session"},r="sh_create_session",l={unversionedId:"client_apis/python/sh/Create",id:"client_apis/python/sh/Create",title:"sh_create_session",description:"package: ndb.sessionclient",source:"@site/docs/client_apis/python/sh/Create.md",sourceDirName:"client_apis/python/sh",slug:"/client_apis/python/sh/Create",permalink:"/client_apis/python/sh/Create",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,displayed_sidebar:"clientApisSidebar",sidebar_label:"sh_create_session"},sidebar:"clientApisSidebar",previous:{title:"Sessions",permalink:"/category/sessions-2"},next:{title:"sh_end",permalink:"/client_apis/python/sh/End"}},o={},p=[{value:"Returns",id:"returns",level:2},{value:"Examples",id:"examples",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sh_create_session"},"sh_create_session"),(0,i.kt)("p",null,"package: ",(0,i.kt)("inlineCode",{parentName:"p"},"ndb.sessionclient")),(0,i.kt)("p",null,"Creates a new session."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Param"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"durationSeconds"),(0,i.kt)("td",{parentName:"tr",align:null},"unsigned int"),(0,i.kt)("td",{parentName:"tr",align:null},"Time in seconds until the session expires. Default ",(0,i.kt)("inlineCode",{parentName:"td"},"0")," (never expires)"),(0,i.kt)("td",{parentName:"tr",align:null},"N")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"deleteSession"),(0,i.kt)("td",{parentName:"tr",align:null},"bool"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),": session is deleted when it expires",(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"false"),": only the keys are deleted (default)"),(0,i.kt)("td",{parentName:"tr",align:null},"N")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"extendOnSetAdd"),(0,i.kt)("td",{parentName:"tr",align:null},"bool"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),": on each set or add, the expire time is extended by ",(0,i.kt)("inlineCode",{parentName:"td"},"duration"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"false"),": default"),(0,i.kt)("td",{parentName:"tr",align:null},"N")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"extendOnGet"),(0,i.kt)("td",{parentName:"tr",align:null},"bool"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),": on each get, the expire time is extended by ",(0,i.kt)("inlineCode",{parentName:"td"},"duration"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"false"),": default"),(0,i.kt)("td",{parentName:"tr",align:null},"N")))),(0,i.kt)("p",null,"A session is uniquely identified by a session token (typically referred to in the API as ",(0,i.kt)("inlineCode",{parentName:"p"},"tkn"),"), which is a 64-bit unsigned integer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"client = SessionClient()\nawait client.open('ws://127.0.0.1:1987/')\n\nsession = await client.create_session()\n\nawait client.set({'key1':'value1'}, session.tkn)\n")),(0,i.kt)("p",null,"Sets the key in that session."),(0,i.kt)("p",null,"Similarly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"client.get(('k1','k2'), session.tkn)\n")),(0,i.kt)("p",null,"Gets keys from that session. This applies to all command functions when using a token."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Session")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the command was success ",(0,i.kt)("inlineCode",{parentName:"li"},"Session.isValid")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"True"),", otherwise ",(0,i.kt)("inlineCode",{parentName:"li"},"False")),(0,i.kt)("li",{parentName:"ul"},"If successful, the token is set in ",(0,i.kt)("inlineCode",{parentName:"li"},"Session.tkn"))),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"Sessions are managed by an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionClient")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"ndb.sessionclient")," package. A ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionClient")," is not coupled to a particular session, so the token must be passed to the command functions (",(0,i.kt)("inlineCode",{parentName:"p"},"set()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"get()"),", etc)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"title='Create a session'",title:"'Create",a:!0,"session'":!0},"from ndb.sessionclient import SessionClient\n\n\nclient = SessionClient()\nawait client.open('ws://127.0.0.1:1987/')\n\nsession = await client.create_session()\nif session.isValid:\n  print(f'Session created with token {session.tkn}')\nelse\n  print('Fail')\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"title='Create multiple sessions'",title:"'Create",multiple:!0,"sessions'":!0},"from ndb.sessionclient import SessionClient\n\n\nclient = SessionClient()\nawait client.open('ws://127.0.0.1:1987/')\n\nsession1 = await client.create_session()\nsession2 = await client.create_session()\n\nif session1.isValid and session2.isValid:\n  print(f'Session 1 token {session1.token}')\n  print(f'Session 2 token {session2.token}')\nelse\n  print('Fail')\n")))}u.isMDXComponent=!0}}]);