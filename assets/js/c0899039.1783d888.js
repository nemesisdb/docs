"use strict";(self.webpackChunknemesisdb=self.webpackChunknemesisdb||[]).push([[324],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var s=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=s.createContext({}),u=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return s.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},m=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(t),m=r,k=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return t?s.createElement(k,a(a({ref:n},p),{},{components:t})):s.createElement(k,a({ref:n},p))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[c]="string"==typeof e?e:r,a[1]=o;for(var u=2;u<i;u++)a[u]=t[u];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8720:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var s=t(7462),r=(t(7294),t(3905));const i={sidebar_position:0,displayed_sidebar:"clientApisSidebar"},a="Quick Start",o={unversionedId:"client_apis/python/sh/Quick-Start",id:"client_apis/python/sh/Quick-Start",title:"Quick Start",description:"The NdbClient is the entry point:",source:"@site/docs/client_apis/python/sh/Quick-Start.md",sourceDirName:"client_apis/python/sh",slug:"/client_apis/python/sh/Quick-Start",permalink:"/client_apis/python/sh/Quick-Start",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,displayed_sidebar:"clientApisSidebar"},sidebar:"clientApisSidebar",previous:{title:"Sessions",permalink:"/category/sessions-2"},next:{title:"sh_create",permalink:"/client_apis/python/sh/Create"}},l={},u=[],p={toc:u},c="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,s.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start"},"Quick Start"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"NdbClient")," is the entry point:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"from ndb.client import NdbClient, Session")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"open()")," to connect"),(0,r.kt)("li",{parentName:"ul"},"Functions starting ",(0,r.kt)("inlineCode",{parentName:"li"},"sh_")," to manage sessions and their keys"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sh_create()")," creates a new session, returning a ",(0,r.kt)("inlineCode",{parentName:"li"},"Session")," object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sh_end()")," ends a session"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sh_set()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"sh_get()"),", etc to store/access keys"),(0,r.kt)("li",{parentName:"ul"},"If a command returns an failure, an ",(0,r.kt)("inlineCode",{parentName:"li"},"ndb.ResponseError")," is raised",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The exception message contains the error code"),(0,r.kt)("li",{parentName:"ul"},"The exception contains ",(0,r.kt)("inlineCode",{parentName:"li"},"rsp")," which is the full response")))),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title='Create session and set/get keys'",title:"'Create",session:!0,and:!0,"set/get":!0,"keys'":!0},"from ndb.client import NdbClient, Session\n\nclient = NdbClient(debug=False) # toggle for debug logs\nif not (await client.open('ws://127.0.0.1:1987/')):\n  print('Failed to connect')\n  return\n\nsession = await client.sh_create()\nif not session.tknValid:\n  return\n\nprint(f\"Session created with session token: {session.tkn}\")\n\n# set keys in the session\nawait client.sh_set(session.tkn, {'fname':'James', 'sname':'smith'})\n\n# retrieve from session\nvalues = await client.sh_get(session.tkn, keys=('fname', 'sname'))\nprint(values)\n\n\n# overwrite surname ('smith' to 'Smith')\nawait client.sh_set(session.tkn, {'sname':'Smith'})\n\n# retrieve updated value\nvalues = await client.sh_get(session.tkn, keys=('fname', 'sname'))\nprint(values)\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"The next example shows how you can use a session to represent user data:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a separate session for each user"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"newUser()")," sets the defaults"),(0,r.kt)("li",{parentName:"ul"},"The other functions update those values as required")),(0,r.kt)("p",null,"Using sessions like this is a convenient way to separate data, switching between\nusers by using the appropriate token."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title='Create multiple sessions'",title:"'Create",multiple:!0,"sessions'":!0},"from ndb.client import NdbClient, Session\n\nasync def newUser(tkn: int, uname: str):\n  # set defaults for the user\n  user = {\n           'username':uname,\n           'reset_password':True,\n           'blocked':False,\n           'roles':['NewUser', 'ReadOnly']\n         }    \n  \n  await client.sh_set(tkn, user)\n\n\nasync def updatePassword(tkn: int):\n  # we don't need username, because the session token uniquely identifies this user's data\n  await client.sh_set(tkn, {'reset_password':False})\n\n\nasync def failedAuth(tkn: int):\n  await client.sh_set(tkn, {'reset_password':True, 'blocked':True})\n\n\nasync def updateRoles(tkn: int):\n  # overwrite 'roles'\n  await client.sh_set(tkn, {'roles':['StandardUser']})\n\n\nclient = NdbClient()\nif not (await client.open('ws://127.0.0.1:1987/')):\n  print('Failed to connect')\n  return\n\nsession_user1 = await client.sh_create()\nsession_user2 = await client.sh_create()\n\nprint(f'User1 Session: {session_user1.tkn}\\nUser2 Session: {session_user2.tkn}')\n\nawait newUser(session_user1.tkn, 'user1')\nawait newUser(session_user2.tkn, 'user2')\n\n# user1 resets their password\nawait updatePassword(session_user1.tkn)\n\n# user1 account changed, update their roles\nawait updateRoles(session_user1.tkn)\n\n# user2 fails auth so must be blocked\nawait failedAuth(session_user2.tkn)\n")))}d.isMDXComponent=!0}}]);