"use strict";(self.webpackChunknemesisdb=self.webpackChunknemesisdb||[]).push([[770],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var s=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,i=function(e,n){if(null==e)return{};var t,s,i={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=s.createContext({}),p=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return s.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},m=s.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?s.createElement(k,r(r({ref:n},c),{},{components:t})):s.createElement(k,r({ref:n},c))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<a;p++)r[p]=t[p];return s.createElement.apply(null,r)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6990:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var s=t(7462),i=(t(7294),t(3905));const a={sidebar_position:1,displayed_sidebar:"clientApisSidebar",sidebar_label:"create_session"},r="create_session",o={unversionedId:"client_apis/python/sessions/Create",id:"client_apis/python/sessions/Create",title:"create_session",description:"package: ndb.sessionclient",source:"@site/docs/client_apis/python/sessions/Create.md",sourceDirName:"client_apis/python/sessions",slug:"/client_apis/python/sessions/Create",permalink:"/client_apis/python/sessions/Create",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,displayed_sidebar:"clientApisSidebar",sidebar_label:"create_session"},sidebar:"clientApisSidebar",previous:{title:"Sessions",permalink:"/category/sessions-2"},next:{title:"end_session",permalink:"/client_apis/python/sessions/End"}},l={},p=[{value:"Returns",id:"returns",level:2},{value:"Examples",id:"examples",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,s.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create_session"},"create_session"),(0,i.kt)("p",null,"package: ",(0,i.kt)("inlineCode",{parentName:"p"},"ndb.sessionclient")),(0,i.kt)("p",null,"Creates a new session."),(0,i.kt)("p",null,"A session is uniquely identified by a session token (typically passed around the code as ",(0,i.kt)("inlineCode",{parentName:"p"},"tkn"),"), which is a 64-bit unsigned integer."),(0,i.kt)("p",null,"Sessions are managed by an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionClient")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"ndb.sessionclient")," package. A ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionClient")," is not coupled to a particular session, so the token must be passed to the command functions (",(0,i.kt)("inlineCode",{parentName:"p"},"set()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"get()"),", etc)."),(0,i.kt)("p",null,"Calling: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"client = SessionClient()\nawait client.open('ws://127.0.0.1:1987/')\n\nsession = await client.create_session()\n\nawait client.set({'key1':'value1'}, session.tkn)\n")),(0,i.kt)("p",null,"Sets the key in that session."),(0,i.kt)("p",null,"Similarly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"client.get(('k1','k2'), session.tkn)\n")),(0,i.kt)("p",null,"Gets keys from that session. This applies to all command functions when using a token."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Ensure the database has sessions enabled via the ",(0,i.kt)("a",{parentName:"p",href:"../../../home/config"},"configuration")," file.")),(0,i.kt)("h2",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Session")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the command was success ",(0,i.kt)("inlineCode",{parentName:"li"},"Session.isValid")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"True"),", otherwise ",(0,i.kt)("inlineCode",{parentName:"li"},"False")),(0,i.kt)("li",{parentName:"ul"},"If successful, the token is set in ",(0,i.kt)("inlineCode",{parentName:"li"},"Session.tkn"))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"title='Create a session'",title:"'Create",a:!0,"session'":!0},"from ndb.sessionclient import SessionClient\n\n\nclient = SessionClient()\nawait client.open('ws://127.0.0.1:1987/')\n\nsession = await client.create_session()\nif session.isValid:\n  print(f'Session created with token {session.tkn}')\nelse\n  print('Fail')\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"title='Create multiple sessions'",title:"'Create",multiple:!0,"sessions'":!0},"from ndb.sessionclient import SessionClient\n\n\nclient = SessionClient()\nawait client.open('ws://127.0.0.1:1987/')\n\nsession1 = await client.create_session()\nsession2 = await client.create_session()\n\nif session1.isValid and session2.isValid:\n  print(f'Session 1 token {session1.token}')\n  print(f'Session 2 token {session2.token}')\nelse\n  print('Fail')\n")))}d.isMDXComponent=!0}}]);