"use strict";(self.webpackChunknemesisdb=self.webpackChunknemesisdb||[]).push([[3672],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(k,o(o({ref:t},c),{},{components:n})):r.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8807:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2,displayed_sidebar:"homeSidebar"},o="Windows",l={unversionedId:"home/install/docker/windows",id:"home/install/docker/windows",title:"Windows",description:"Running NemesisDB with Docker is required on Windows. You can try the Debian package with WSL2 but this is not supported.",source:"@site/docs/home/install/docker/windows.md",sourceDirName:"home/install/docker",slug:"/home/install/docker/windows",permalink:"/home/install/docker/windows",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,displayed_sidebar:"homeSidebar"},sidebar:"homeSidebar",previous:{title:"Linux",permalink:"/home/install/docker/linux"},next:{title:"Debian Package",permalink:"/home/install/package"}},s={},p=[{value:"Pull",id:"pull",level:2},{value:"Start - Default Config",id:"start---default-config",level:2},{value:"Start - Custom Config",id:"start---custom-config",level:2},{value:"Stop",id:"stop",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"windows"},"Windows"),(0,a.kt)("p",null,"Running NemesisDB with Docker is required on Windows. You can try the Debian package with WSL2 but this is not supported."),(0,a.kt)("p",null,"This is similar to Linux except:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--network host")," is not available"),(0,a.kt)("li",{parentName:"ul"},"Read-only volume mount is not available")),(0,a.kt)("h2",{id:"pull"},"Pull"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull nemesisdb/nemesisdb:latest\n")),(0,a.kt)("p",null,"Confirm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker images\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"REPOSITORY            TAG       IMAGE ID       CREATED        SIZE\nnemesisdb/nemesisdb   0.3.2     6c2973cf3e57   5 hours ago    17.9MB\n")),(0,a.kt)("h2",{id:"start---default-config"},"Start - Default Config"),(0,a.kt)("p",null,"The default config, included in the image, starts the server on ",(0,a.kt)("inlineCode",{parentName:"p"},"0.0.0.0:1987")," so it is available from the host at ",(0,a.kt)("inlineCode",{parentName:"p"},"127.0.0.1:1987"),"."),(0,a.kt)("p",null,"Start with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -d -p 1987:1987  --name test1 nemesisdb/nemesisdb:latest\n")),(0,a.kt)("h2",{id:"start---custom-config"},"Start - Custom Config"),(0,a.kt)("p",null,"We need to create a network, mount a volume and pass the config file path:"),(0,a.kt)("p",null,"Create a network on the ",(0,a.kt)("inlineCode",{parentName:"p"},"192.168.1.x")," range:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker network create --subnet 192.168.1.0/16 my-net\n")),(0,a.kt)("p",null,"Start with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -d --network=my-net --ip=192.168.1.111 -v ./server/configs:/configs --name test1 nemesisdb/nemesisdb:latest --config=./configs/config.json\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The config file has ",(0,a.kt)("inlineCode",{parentName:"li"},'"kv" : {"ip":"192.168.1.111"}')," set which is within the range of our ",(0,a.kt)("inlineCode",{parentName:"li"},"my-net")," we just created"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-v")," mounts as ",(0,a.kt)("inlineCode",{parentName:"li"},"<hostpath>:<containerpath>")," , so our host has a config file in ",(0,a.kt)("inlineCode",{parentName:"li"},"./server/configs")),(0,a.kt)("li",{parentName:"ul"},"The path passed to the container is ",(0,a.kt)("inlineCode",{parentName:"li"},"./configs")," because that's where it was mounted in the ",(0,a.kt)("inlineCode",{parentName:"li"},"-v"))),(0,a.kt)("h2",{id:"stop"},"Stop"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker stop test1\n")))}d.isMDXComponent=!0}}]);