"use strict";(self.webpackChunknemesisdb=self.webpackChunknemesisdb||[]).push([[214],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),k=r,m=c["".concat(l,".").concat(k)]||c[k]||d[k]||s;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=k;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},3177:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_position:3,displayed_sidebar:"tutorialSidebar"},i="Set and Get",o={unversionedId:"tutorials/first-steps/setandget",id:"tutorials/first-steps/setandget",title:"Set and Get",description:"We'll store data of different types. With data types part of the JSON syntax, we don't have to care about types, only that the JSON is valid.",source:"@site/docs/tutorials/first-steps/setandget.md",sourceDirName:"tutorials/first-steps",slug:"/tutorials/first-steps/setandget",permalink:"/docs-deploy/tutorials/first-steps/setandget",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,displayed_sidebar:"tutorialSidebar"},sidebar:"tutorialSidebar",previous:{title:"Create Session",permalink:"/docs-deploy/tutorials/first-steps/new-session"}},l={},p=[{value:"String",id:"string",level:2},{value:"Array",id:"array",level:2},{value:"Multiple",id:"multiple",level:2},{value:"Get Data",id:"get-data",level:2},{value:"Clear Session Data",id:"clear-session-data",level:2},{value:"Object",id:"object",level:2},{value:"Get Object",id:"get-object",level:2},{value:"The End",id:"the-end",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"set-and-get"},"Set and Get"),(0,r.kt)("p",null,"We'll store data of different types. With data types part of the JSON syntax, we don't have to care about types, only that the JSON is valid."),(0,r.kt)("p",null,"To interact with data, the Key Value API is used. It's commands begin ",(0,r.kt)("inlineCode",{parentName:"p"},"KV_"),"."),(0,r.kt)("admonition",{title:"Token",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Remember to replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"tkn")," with your token.")),(0,r.kt)("h2",{id:"string"},"String"),(0,r.kt)("p",null,"Send:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_SET":\n  {\n    "tkn":"14247375118774737462",\n    "keys":\n    {\n      "username":"Spongebob"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"The response contains ",(0,r.kt)("inlineCode",{parentName:"p"},'"username": 20'),' which is the key and status. This confirms "username" was successfully set.'),(0,r.kt)("p",null,"If you send the command again, the status will change to ",(0,r.kt)("inlineCode",{parentName:"p"},"21"),", which means an existing key has been overwritten (not an error)."),(0,r.kt)("h2",{id:"array"},"Array"),(0,r.kt)("p",null,"Send:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_SET":\n  {\n    "tkn":"14247375118774737462",\n    "keys":\n    {\n      "friends":\n      [\n        "Crabs",\n        "Patrick"\n      ]\n    }\n  }\n}\n')),(0,r.kt)("p",null,'This stores a key, "friends", which is an array.'),(0,r.kt)("h2",{id:"multiple"},"Multiple"),(0,r.kt)("p",null,"You can store multiple keys per request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_SET":\n  {\n    "tkn":"14247375118774737462",\n    "keys":\n    {\n      "email":"bob@thesea.com",\n      "age":10\n    }\n  }\n}\n')),(0,r.kt)("p",null,"This stores two keys:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"email" which is a string'),(0,r.kt)("li",{parentName:"ul"},'"age" which is a number')),(0,r.kt)("h2",{id:"get-data"},"Get Data"),(0,r.kt)("p",null,"To get keys use ",(0,r.kt)("inlineCode",{parentName:"p"},"KV_GET"),", which can get multiple keys in one request so we'll get all four:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_GET":\n  {\n    "tkn":"14247375118774737462",\n    "keys":["username", "email", "age", "friends"]\n  }\n}\n')),(0,r.kt)("p",null,"The response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_GET_RSP": {\n    "tkn": "14247375118774737462",\n    "keys": {\n      "username": "Spongebob",\n      "email": "bob@thesea.com",\n      "age": 10,\n      "friends":[\n        "Crabs",\n        "Patrick"\n      ]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"This is okay, but what if we want all this in a single key? We can use an object."),(0,r.kt)("h2",{id:"clear-session-data"},"Clear Session Data"),(0,r.kt)("p",null,"Let's clear our session data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_CLEAR":\n  {\n    "tkn":"14247375118774737462"\n  }\n}\n')),(0,r.kt)("p",null,"The reponse confirms that four keys have deleted (",(0,r.kt)("inlineCode",{parentName:"p"},"cnt"),")."),(0,r.kt)("h2",{id:"object"},"Object"),(0,r.kt)("p",null,"We'll store the same data again but in an object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_SET":\n  {\n    "tkn":"14247375118774737462",\n    "keys":\n    {\n      "profile":\n      {\n        "username": "Spongebob",\n        "friends": ["Crabs","Patrick"],\n        "email":"bob@thesea.com",\n        "age":10\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,'This is storing a key "profile" which is an object. '),(0,r.kt)("h2",{id:"get-object"},"Get Object"),(0,r.kt)("p",null,"Now when we want the user's profile data, we just have to get one key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "KV_GET":\n  {\n    "tkn":"14247375118774737462",\n    "keys":["profile"]\n  }\n}\n')),(0,r.kt)("h2",{id:"the-end"},"The End"),(0,r.kt)("p",null,"That's the basics of setting and getting."),(0,r.kt)("p",null,"This guide shows one session for a user. This pattern works for many users, each with their own session. The client service just need to use the appropriate taken to switch to the correct user."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"KV_SET")," overwrites the key if it already exists. If you don't want this, you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"KV_ADD")," which won't overwrite"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"KV_SET")," always returns a response. If you don't need confirmation, you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"KV_SETQ"),' ("set quiet") which only responds on an error'))))}d.isMDXComponent=!0}}]);