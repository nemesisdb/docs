"use strict";(self.webpackChunknemesisdb=self.webpackChunknemesisdb||[]).push([[5845],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>y});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(a),m=n,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return a?r.createElement(y,l(l({ref:t},c),{},{components:a})):r.createElement(y,l({ref:t},c))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5897:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const i={sidebar_position:20,displayed_sidebar:"clientApisSidebar"},l="create",o={unversionedId:"client_apis/python/arr/create",id:"client_apis/python/arr/create",title:"create",description:"|Param|Description|",source:"@site/docs/client_apis/python/arr/create.md",sourceDirName:"client_apis/python/arr",slug:"/client_apis/python/arr/create",permalink:"/client_apis/python/arr/create",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,displayed_sidebar:"clientApisSidebar"},sidebar:"clientApisSidebar",previous:{title:"Overview",permalink:"/client_apis/python/arr/overview"},next:{title:"set",permalink:"/client_apis/python/arr/set"}},s={},p=[{value:"Array Type Differences",id:"array-type-differences",level:2},{value:"Raises",id:"raises",level:2},{value:"Examples",id:"examples",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"create"},"create"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},"async def create(name: str, capacity: int) -> None\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Param"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"name"),(0,n.kt)("td",{parentName:"tr",align:null},"Name of the array.",(0,n.kt)("br",null),"The ",(0,n.kt)("inlineCode",{parentName:"td"},"name")," must only be unique amongst arrays of the same type, i.e. you can create an object array called ",(0,n.kt)("inlineCode",{parentName:"td"},"students")," and an integer array also called ",(0,n.kt)("inlineCode",{parentName:"td"},"students"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"capacity"),(0,n.kt)("td",{parentName:"tr",align:null},"Maximum length of the array")))),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"The capacity is fixed, the array's length/capacity cannot increase.")),(0,n.kt)("p",null,"If ",(0,n.kt)("inlineCode",{parentName:"p"},"capacity")," exceeds the ",(0,n.kt)("inlineCode",{parentName:"p"},"arrays:maxCapacity")," in the server config a ResponseError is raised, containing the ",(0,n.kt)("inlineCode",{parentName:"p"},"Bounds")," status. "),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"capacity")," is the maximum length of the array. As new values are set, the ",(0,n.kt)("inlineCode",{parentName:"p"},"used()")," increases.\nWhen ",(0,n.kt)("inlineCode",{parentName:"p"},"used() == capacity()")," the array is full. Calls to ",(0,n.kt)("inlineCode",{parentName:"p"},"clear()")," reduces ",(0,n.kt)("inlineCode",{parentName:"p"},"used()"),". "),(0,n.kt)("p",null,"In an unsorted array you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"set()")," to overwrite existing values, so the ",(0,n.kt)("inlineCode",{parentName:"p"},"used()")," does not change."),(0,n.kt)("h2",{id:"array-type-differences"},"Array Type Differences"),(0,n.kt)("p",null,"None"),(0,n.kt)("h2",{id:"raises"},"Raises"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ResponseError"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"name")," already exists"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"capacity")," exceeds maximum set in the server config"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ValueError")," caught before query is sent",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"name")," is empty"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"len")," is ",(0,n.kt)("inlineCode",{parentName:"li"},"<= 0"))))),(0,n.kt)("h2",{id:"examples"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},"from ndb.client import NdbClient\nfrom ndb.arrays import IntArrays, SortedIntArrays\n\nclient = NdbClient()\nawait client.open('ws://127.0.0.1:1987/')\n\n# create API object for unsorted and sorted int array\nunsortedArrays = IntArrays(client)\nsortedArrays = SortedIntArrays(client)\n\n# create two arrays, each with a capacity of 4\nawait unsortedArrays.create('my_array1', 4)\nawait sortedArrays.create('my_array2', 4)\n\n# omit 'pos' to being set at next available position\nawait unsortedArrays.set_rng('my_array1', [100,50,200,10])\nawait sortedArrays.set_rng('my_array2', [100,50,200,10])\n\n# omit 'stop', get values to end\nunsortedValues = await unsortedArrays.get_rng('my_array1', start=0)\nsortedValues = await sortedArrays.get_rng('my_array2', start=0)\n\nprint(unsortedValues)\nprint(sortedValues)\n")),(0,n.kt)("p",null,"Output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},"[100, 50, 200, 10]\n[10, 50, 100, 200]\n")))}u.isMDXComponent=!0}}]);